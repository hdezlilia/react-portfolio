{"ast":null,"code":"var _jsxFileName = \"/Users/liliahernandez/Documents/GitHub/react-portfolio/src/components/BucketList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BucketList() {\n  _s();\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = item => {\n    console.log('ðŸš€ ~ file: BucketList.js ~ line 10 ~ addBucketItem ~ item', item);\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newBucket = [item, ...bucket];\n    console.log(newBucket);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setBucket(newBucket);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = id => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map(item => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n    console.log(updatedBucket);\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = id => {\n    const updatedBucket = [...bucket].filter(item => item.id !== id);\n    setBucket(updatedBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setBucket(prev => prev.map(item => item.id === itemId ? newValue : item));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to my Portfolio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BucketForm, {\n      onSubmit: addBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bucket, {\n      bucket: bucket,\n      completeBucketItem: completeBucketItem,\n      removeBucketItem: removeBucketItem,\n      editBucketItem: editBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(BucketList, \"v9pnzffudb0EPv26TAOFWvRojGo=\");\n_c = BucketList;\nexport default BucketList;\nvar _c;\n$RefreshReg$(_c, \"BucketList\");","map":{"version":3,"names":["React","useState","BucketForm","Bucket","jsxDEV","_jsxDEV","BucketList","_s","bucket","setBucket","addBucketItem","item","console","log","text","newBucket","completeBucketItem","id","updatedBucket","map","isComplete","removeBucketItem","filter","editBucketItem","itemId","newValue","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/liliahernandez/Documents/GitHub/react-portfolio/src/components/BucketList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    console.log(\n      'ðŸš€ ~ file: BucketList.js ~ line 10 ~ addBucketItem ~ item',\n      item\n    );\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newBucket = [item, ...bucket];\n    console.log(newBucket);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setBucket(newBucket);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n\n    console.log(updatedBucket);\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    const updatedBucket = [...bucket].filter((item) => item.id !== id);\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>Welcome to my Portfolio</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMS,aAAa,GAAIC,IAAI,IAAK;IAC9BC,OAAO,CAACC,GAAG,CACT,2DAA2D,EAC3DF,IACF,CAAC;IACD;IACA,IAAI,CAACA,IAAI,CAACG,IAAI,EAAE;MACd;IACF;;IAEA;IACA,MAAMC,SAAS,GAAG,CAACJ,IAAI,EAAE,GAAGH,MAAM,CAAC;IACnCI,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;;IAEtB;IACAN,SAAS,CAACM,SAAS,CAAC;EACtB,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAIC,EAAE,IAAK;IACjC;IACA,IAAIC,aAAa,GAAGV,MAAM,CAACW,GAAG,CAAER,IAAI,IAAK;MACvC,IAAIA,IAAI,CAACM,EAAE,KAAKA,EAAE,EAAE;QAClBN,IAAI,CAACS,UAAU,GAAG,CAACT,IAAI,CAACS,UAAU;MACpC;MACA,OAAOT,IAAI;IACb,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAACK,aAAa,CAAC;IAC1BT,SAAS,CAACS,aAAa,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAIJ,EAAE,IAAK;IAC/B,MAAMC,aAAa,GAAG,CAAC,GAAGV,MAAM,CAAC,CAACc,MAAM,CAAEX,IAAI,IAAKA,IAAI,CAACM,EAAE,KAAKA,EAAE,CAAC;IAElER,SAAS,CAACS,aAAa,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMK,cAAc,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;IAC3C;IACA,IAAI,CAACA,QAAQ,CAACX,IAAI,EAAE;MAClB;IACF;;IAEA;IACA;IACAL,SAAS,CAAEiB,IAAI,IACbA,IAAI,CAACP,GAAG,CAAER,IAAI,IAAMA,IAAI,CAACM,EAAE,KAAKO,MAAM,GAAGC,QAAQ,GAAGd,IAAK,CAC3D,CAAC;EACH,CAAC;EAED,oBACEN,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC1B,OAAA,CAACH,UAAU;MAAC8B,QAAQ,EAAEtB;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvC1B,OAAA,CAACF,MAAM;MACLK,MAAM,EAAEA,MAAO;MACfQ,kBAAkB,EAAEA,kBAAmB;MACvCK,gBAAgB,EAAEA,gBAAiB;MACnCE,cAAc,EAAEA;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAACxB,EAAA,CArEQD,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AAuEnB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}